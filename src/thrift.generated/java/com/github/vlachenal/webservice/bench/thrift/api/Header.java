/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.vlachenal.webservice.bench.thrift.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Request header
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class Header implements org.apache.thrift.TBase<Header, Header._Fields>, java.io.Serializable, Cloneable, Comparable<Header> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Header");

  private static final org.apache.thrift.protocol.TField REQUEST_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSeq", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("mapper", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HeaderStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HeaderTupleSchemeFactory();

  private int requestSeq; // required
  private Mapper mapper; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Request sequence
     */
    REQUEST_SEQ((short)1, "requestSeq"),
    /**
     * Mapper to use
     * 
     * @see Mapper
     */
    MAPPER((short)2, "mapper");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_SEQ
          return REQUEST_SEQ;
        case 2: // MAPPER
          return MAPPER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUESTSEQ_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_SEQ, new org.apache.thrift.meta_data.FieldMetaData("requestSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAPPER, new org.apache.thrift.meta_data.FieldMetaData("mapper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Mapper.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Header.class, metaDataMap);
  }

  public Header() {
  }

  public Header(
    int requestSeq,
    Mapper mapper)
  {
    this();
    this.requestSeq = requestSeq;
    setRequestSeqIsSet(true);
    this.mapper = mapper;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Header(Header other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requestSeq = other.requestSeq;
    if (other.isSetMapper()) {
      this.mapper = other.mapper;
    }
  }

  public Header deepCopy() {
    return new Header(this);
  }

  @Override
  public void clear() {
    setRequestSeqIsSet(false);
    this.requestSeq = 0;
    this.mapper = null;
  }

  /**
   * Request sequence
   */
  public int getRequestSeq() {
    return this.requestSeq;
  }

  /**
   * Request sequence
   */
  public void setRequestSeq(int requestSeq) {
    this.requestSeq = requestSeq;
    setRequestSeqIsSet(true);
  }

  public void unsetRequestSeq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSEQ_ISSET_ID);
  }

  /** Returns true if field requestSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSeq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSEQ_ISSET_ID);
  }

  public void setRequestSeqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSEQ_ISSET_ID, value);
  }

  /**
   * Mapper to use
   * 
   * @see Mapper
   */
  public Mapper getMapper() {
    return this.mapper;
  }

  /**
   * Mapper to use
   * 
   * @see Mapper
   */
  public void setMapper(Mapper mapper) {
    this.mapper = mapper;
  }

  public void unsetMapper() {
    this.mapper = null;
  }

  /** Returns true if field mapper is set (has been assigned a value) and false otherwise */
  public boolean isSetMapper() {
    return this.mapper != null;
  }

  public void setMapperIsSet(boolean value) {
    if (!value) {
      this.mapper = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case REQUEST_SEQ:
      if (value == null) {
        unsetRequestSeq();
      } else {
        setRequestSeq((java.lang.Integer)value);
      }
      break;

    case MAPPER:
      if (value == null) {
        unsetMapper();
      } else {
        setMapper((Mapper)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_SEQ:
      return getRequestSeq();

    case MAPPER:
      return getMapper();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_SEQ:
      return isSetRequestSeq();
    case MAPPER:
      return isSetMapper();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Header)
      return this.equals((Header)that);
    return false;
  }

  public boolean equals(Header that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestSeq = true;
    boolean that_present_requestSeq = true;
    if (this_present_requestSeq || that_present_requestSeq) {
      if (!(this_present_requestSeq && that_present_requestSeq))
        return false;
      if (this.requestSeq != that.requestSeq)
        return false;
    }

    boolean this_present_mapper = true && this.isSetMapper();
    boolean that_present_mapper = true && that.isSetMapper();
    if (this_present_mapper || that_present_mapper) {
      if (!(this_present_mapper && that_present_mapper))
        return false;
      if (!this.mapper.equals(that.mapper))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + requestSeq;

    hashCode = hashCode * 8191 + ((isSetMapper()) ? 131071 : 524287);
    if (isSetMapper())
      hashCode = hashCode * 8191 + mapper.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(Header other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRequestSeq()).compareTo(other.isSetRequestSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSeq, other.requestSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMapper()).compareTo(other.isSetMapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapper, other.mapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Header(");
    boolean first = true;

    sb.append("requestSeq:");
    sb.append(this.requestSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapper:");
    if (this.mapper == null) {
      sb.append("null");
    } else {
      sb.append(this.mapper);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeaderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HeaderStandardScheme getScheme() {
      return new HeaderStandardScheme();
    }
  }

  private static class HeaderStandardScheme extends org.apache.thrift.scheme.StandardScheme<Header> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Header struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestSeq = iprot.readI32();
              struct.setRequestSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapper = com.github.vlachenal.webservice.bench.thrift.api.Mapper.findByValue(iprot.readI32());
              struct.setMapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Header struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUEST_SEQ_FIELD_DESC);
      oprot.writeI32(struct.requestSeq);
      oprot.writeFieldEnd();
      if (struct.mapper != null) {
        oprot.writeFieldBegin(MAPPER_FIELD_DESC);
        oprot.writeI32(struct.mapper.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeaderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HeaderTupleScheme getScheme() {
      return new HeaderTupleScheme();
    }
  }

  private static class HeaderTupleScheme extends org.apache.thrift.scheme.TupleScheme<Header> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRequestSeq()) {
        optionals.set(0);
      }
      if (struct.isSetMapper()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRequestSeq()) {
        oprot.writeI32(struct.requestSeq);
      }
      if (struct.isSetMapper()) {
        oprot.writeI32(struct.mapper.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.requestSeq = iprot.readI32();
        struct.setRequestSeqIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mapper = com.github.vlachenal.webservice.bench.thrift.api.Mapper.findByValue(iprot.readI32());
        struct.setMapperIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

