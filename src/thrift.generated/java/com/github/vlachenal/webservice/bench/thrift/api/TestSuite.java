/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.vlachenal.webservice.bench.thrift.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)")
public class TestSuite implements org.apache.thrift.TBase<TestSuite, TestSuite._Fields>, java.io.Serializable, Cloneable, Comparable<TestSuite> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestSuite");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NB_THREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("nbThread", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("compression", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JVM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("vendor", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OS_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("osFamily", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CALLS_FIELD_DESC = new org.apache.thrift.protocol.TField("calls", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField MAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("mapper", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TestSuiteStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TestSuiteTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String id; // required
  private int nbThread; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String compression; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String cpu; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String memory; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String jvm; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String vendor; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String osFamily; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String osVersion; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String protocol; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String comment; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<ClientCall> calls; // required
  private @org.apache.thrift.annotation.Nullable Mapper mapper; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Test suite UUID
     */
    ID((short)1, "id"),
    /**
     * Number of simultaneous call
     */
    NB_THREAD((short)2, "nbThread"),
    /**
     * Compression type
     */
    COMPRESSION((short)3, "compression"),
    /**
     * Client CPU model
     */
    CPU((short)4, "cpu"),
    /**
     * Client RAM
     */
    MEMORY((short)5, "memory"),
    /**
     * Client JVM version
     */
    JVM((short)6, "jvm"),
    /**
     * Client JVM vendor
     */
    VENDOR((short)7, "vendor"),
    /**
     * Client OS family
     */
    OS_FAMILY((short)8, "osFamily"),
    /**
     * Client OS version
     */
    OS_VERSION((short)9, "osVersion"),
    /**
     * Protocol
     */
    PROTOCOL((short)10, "protocol"),
    /**
     * Test suite comments
     */
    COMMENT((short)11, "comment"),
    /**
     * Client call statistics
     */
    CALLS((short)12, "calls"),
    /**
     * Mapper which has been used
     * 
     * @see Mapper
     */
    MAPPER((short)13, "mapper");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NB_THREAD
          return NB_THREAD;
        case 3: // COMPRESSION
          return COMPRESSION;
        case 4: // CPU
          return CPU;
        case 5: // MEMORY
          return MEMORY;
        case 6: // JVM
          return JVM;
        case 7: // VENDOR
          return VENDOR;
        case 8: // OS_FAMILY
          return OS_FAMILY;
        case 9: // OS_VERSION
          return OS_VERSION;
        case 10: // PROTOCOL
          return PROTOCOL;
        case 11: // COMMENT
          return COMMENT;
        case 12: // CALLS
          return CALLS;
        case 13: // MAPPER
          return MAPPER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NBTHREAD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPRESSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NB_THREAD, new org.apache.thrift.meta_data.FieldMetaData("nbThread", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("compression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("cpu", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM, new org.apache.thrift.meta_data.FieldMetaData("jvm", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENDOR, new org.apache.thrift.meta_data.FieldMetaData("vendor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("osFamily", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLS, new org.apache.thrift.meta_data.FieldMetaData("calls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientCall.class))));
    tmpMap.put(_Fields.MAPPER, new org.apache.thrift.meta_data.FieldMetaData("mapper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Mapper.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestSuite.class, metaDataMap);
  }

  public TestSuite() {
  }

  public TestSuite(
    java.lang.String id,
    int nbThread,
    java.lang.String cpu,
    java.lang.String memory,
    java.lang.String jvm,
    java.lang.String vendor,
    java.lang.String osFamily,
    java.lang.String osVersion,
    java.lang.String protocol,
    java.lang.String comment,
    java.util.List<ClientCall> calls,
    Mapper mapper)
  {
    this();
    this.id = id;
    this.nbThread = nbThread;
    setNbThreadIsSet(true);
    this.cpu = cpu;
    this.memory = memory;
    this.jvm = jvm;
    this.vendor = vendor;
    this.osFamily = osFamily;
    this.osVersion = osVersion;
    this.protocol = protocol;
    this.comment = comment;
    this.calls = calls;
    this.mapper = mapper;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestSuite(TestSuite other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.nbThread = other.nbThread;
    if (other.isSetCompression()) {
      this.compression = other.compression;
    }
    if (other.isSetCpu()) {
      this.cpu = other.cpu;
    }
    if (other.isSetMemory()) {
      this.memory = other.memory;
    }
    if (other.isSetJvm()) {
      this.jvm = other.jvm;
    }
    if (other.isSetVendor()) {
      this.vendor = other.vendor;
    }
    if (other.isSetOsFamily()) {
      this.osFamily = other.osFamily;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetProtocol()) {
      this.protocol = other.protocol;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetCalls()) {
      java.util.List<ClientCall> __this__calls = new java.util.ArrayList<ClientCall>(other.calls.size());
      for (ClientCall other_element : other.calls) {
        __this__calls.add(new ClientCall(other_element));
      }
      this.calls = __this__calls;
    }
    if (other.isSetMapper()) {
      this.mapper = other.mapper;
    }
  }

  public TestSuite deepCopy() {
    return new TestSuite(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setNbThreadIsSet(false);
    this.nbThread = 0;
    this.compression = null;
    this.cpu = null;
    this.memory = null;
    this.jvm = null;
    this.vendor = null;
    this.osFamily = null;
    this.osVersion = null;
    this.protocol = null;
    this.comment = null;
    this.calls = null;
    this.mapper = null;
  }

  /**
   * Test suite UUID
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  /**
   * Test suite UUID
   */
  public void setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Number of simultaneous call
   */
  public int getNbThread() {
    return this.nbThread;
  }

  /**
   * Number of simultaneous call
   */
  public void setNbThread(int nbThread) {
    this.nbThread = nbThread;
    setNbThreadIsSet(true);
  }

  public void unsetNbThread() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NBTHREAD_ISSET_ID);
  }

  /** Returns true if field nbThread is set (has been assigned a value) and false otherwise */
  public boolean isSetNbThread() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NBTHREAD_ISSET_ID);
  }

  public void setNbThreadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NBTHREAD_ISSET_ID, value);
  }

  /**
   * Compression type
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCompression() {
    return this.compression;
  }

  /**
   * Compression type
   */
  public void setCompression(@org.apache.thrift.annotation.Nullable java.lang.String compression) {
    this.compression = compression;
  }

  public void unsetCompression() {
    this.compression = null;
  }

  /** Returns true if field compression is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression() {
    return this.compression != null;
  }

  public void setCompressionIsSet(boolean value) {
    if (!value) {
      this.compression = null;
    }
  }

  /**
   * Client CPU model
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCpu() {
    return this.cpu;
  }

  /**
   * Client CPU model
   */
  public void setCpu(@org.apache.thrift.annotation.Nullable java.lang.String cpu) {
    this.cpu = cpu;
  }

  public void unsetCpu() {
    this.cpu = null;
  }

  /** Returns true if field cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu() {
    return this.cpu != null;
  }

  public void setCpuIsSet(boolean value) {
    if (!value) {
      this.cpu = null;
    }
  }

  /**
   * Client RAM
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMemory() {
    return this.memory;
  }

  /**
   * Client RAM
   */
  public void setMemory(@org.apache.thrift.annotation.Nullable java.lang.String memory) {
    this.memory = memory;
  }

  public void unsetMemory() {
    this.memory = null;
  }

  /** Returns true if field memory is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory() {
    return this.memory != null;
  }

  public void setMemoryIsSet(boolean value) {
    if (!value) {
      this.memory = null;
    }
  }

  /**
   * Client JVM version
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJvm() {
    return this.jvm;
  }

  /**
   * Client JVM version
   */
  public void setJvm(@org.apache.thrift.annotation.Nullable java.lang.String jvm) {
    this.jvm = jvm;
  }

  public void unsetJvm() {
    this.jvm = null;
  }

  /** Returns true if field jvm is set (has been assigned a value) and false otherwise */
  public boolean isSetJvm() {
    return this.jvm != null;
  }

  public void setJvmIsSet(boolean value) {
    if (!value) {
      this.jvm = null;
    }
  }

  /**
   * Client JVM vendor
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVendor() {
    return this.vendor;
  }

  /**
   * Client JVM vendor
   */
  public void setVendor(@org.apache.thrift.annotation.Nullable java.lang.String vendor) {
    this.vendor = vendor;
  }

  public void unsetVendor() {
    this.vendor = null;
  }

  /** Returns true if field vendor is set (has been assigned a value) and false otherwise */
  public boolean isSetVendor() {
    return this.vendor != null;
  }

  public void setVendorIsSet(boolean value) {
    if (!value) {
      this.vendor = null;
    }
  }

  /**
   * Client OS family
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOsFamily() {
    return this.osFamily;
  }

  /**
   * Client OS family
   */
  public void setOsFamily(@org.apache.thrift.annotation.Nullable java.lang.String osFamily) {
    this.osFamily = osFamily;
  }

  public void unsetOsFamily() {
    this.osFamily = null;
  }

  /** Returns true if field osFamily is set (has been assigned a value) and false otherwise */
  public boolean isSetOsFamily() {
    return this.osFamily != null;
  }

  public void setOsFamilyIsSet(boolean value) {
    if (!value) {
      this.osFamily = null;
    }
  }

  /**
   * Client OS version
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOsVersion() {
    return this.osVersion;
  }

  /**
   * Client OS version
   */
  public void setOsVersion(@org.apache.thrift.annotation.Nullable java.lang.String osVersion) {
    this.osVersion = osVersion;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  /**
   * Protocol
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProtocol() {
    return this.protocol;
  }

  /**
   * Protocol
   */
  public void setProtocol(@org.apache.thrift.annotation.Nullable java.lang.String protocol) {
    this.protocol = protocol;
  }

  public void unsetProtocol() {
    this.protocol = null;
  }

  /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol() {
    return this.protocol != null;
  }

  public void setProtocolIsSet(boolean value) {
    if (!value) {
      this.protocol = null;
    }
  }

  /**
   * Test suite comments
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getComment() {
    return this.comment;
  }

  /**
   * Test suite comments
   */
  public void setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public int getCallsSize() {
    return (this.calls == null) ? 0 : this.calls.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ClientCall> getCallsIterator() {
    return (this.calls == null) ? null : this.calls.iterator();
  }

  public void addToCalls(ClientCall elem) {
    if (this.calls == null) {
      this.calls = new java.util.ArrayList<ClientCall>();
    }
    this.calls.add(elem);
  }

  /**
   * Client call statistics
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<ClientCall> getCalls() {
    return this.calls;
  }

  /**
   * Client call statistics
   */
  public void setCalls(@org.apache.thrift.annotation.Nullable java.util.List<ClientCall> calls) {
    this.calls = calls;
  }

  public void unsetCalls() {
    this.calls = null;
  }

  /** Returns true if field calls is set (has been assigned a value) and false otherwise */
  public boolean isSetCalls() {
    return this.calls != null;
  }

  public void setCallsIsSet(boolean value) {
    if (!value) {
      this.calls = null;
    }
  }

  /**
   * Mapper which has been used
   * 
   * @see Mapper
   */
  @org.apache.thrift.annotation.Nullable
  public Mapper getMapper() {
    return this.mapper;
  }

  /**
   * Mapper which has been used
   * 
   * @see Mapper
   */
  public void setMapper(@org.apache.thrift.annotation.Nullable Mapper mapper) {
    this.mapper = mapper;
  }

  public void unsetMapper() {
    this.mapper = null;
  }

  /** Returns true if field mapper is set (has been assigned a value) and false otherwise */
  public boolean isSetMapper() {
    return this.mapper != null;
  }

  public void setMapperIsSet(boolean value) {
    if (!value) {
      this.mapper = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NB_THREAD:
      if (value == null) {
        unsetNbThread();
      } else {
        setNbThread((java.lang.Integer)value);
      }
      break;

    case COMPRESSION:
      if (value == null) {
        unsetCompression();
      } else {
        setCompression((java.lang.String)value);
      }
      break;

    case CPU:
      if (value == null) {
        unsetCpu();
      } else {
        setCpu((java.lang.String)value);
      }
      break;

    case MEMORY:
      if (value == null) {
        unsetMemory();
      } else {
        setMemory((java.lang.String)value);
      }
      break;

    case JVM:
      if (value == null) {
        unsetJvm();
      } else {
        setJvm((java.lang.String)value);
      }
      break;

    case VENDOR:
      if (value == null) {
        unsetVendor();
      } else {
        setVendor((java.lang.String)value);
      }
      break;

    case OS_FAMILY:
      if (value == null) {
        unsetOsFamily();
      } else {
        setOsFamily((java.lang.String)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((java.lang.String)value);
      }
      break;

    case PROTOCOL:
      if (value == null) {
        unsetProtocol();
      } else {
        setProtocol((java.lang.String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.String)value);
      }
      break;

    case CALLS:
      if (value == null) {
        unsetCalls();
      } else {
        setCalls((java.util.List<ClientCall>)value);
      }
      break;

    case MAPPER:
      if (value == null) {
        unsetMapper();
      } else {
        setMapper((Mapper)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NB_THREAD:
      return getNbThread();

    case COMPRESSION:
      return getCompression();

    case CPU:
      return getCpu();

    case MEMORY:
      return getMemory();

    case JVM:
      return getJvm();

    case VENDOR:
      return getVendor();

    case OS_FAMILY:
      return getOsFamily();

    case OS_VERSION:
      return getOsVersion();

    case PROTOCOL:
      return getProtocol();

    case COMMENT:
      return getComment();

    case CALLS:
      return getCalls();

    case MAPPER:
      return getMapper();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NB_THREAD:
      return isSetNbThread();
    case COMPRESSION:
      return isSetCompression();
    case CPU:
      return isSetCpu();
    case MEMORY:
      return isSetMemory();
    case JVM:
      return isSetJvm();
    case VENDOR:
      return isSetVendor();
    case OS_FAMILY:
      return isSetOsFamily();
    case OS_VERSION:
      return isSetOsVersion();
    case PROTOCOL:
      return isSetProtocol();
    case COMMENT:
      return isSetComment();
    case CALLS:
      return isSetCalls();
    case MAPPER:
      return isSetMapper();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TestSuite)
      return this.equals((TestSuite)that);
    return false;
  }

  public boolean equals(TestSuite that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_nbThread = true;
    boolean that_present_nbThread = true;
    if (this_present_nbThread || that_present_nbThread) {
      if (!(this_present_nbThread && that_present_nbThread))
        return false;
      if (this.nbThread != that.nbThread)
        return false;
    }

    boolean this_present_compression = true && this.isSetCompression();
    boolean that_present_compression = true && that.isSetCompression();
    if (this_present_compression || that_present_compression) {
      if (!(this_present_compression && that_present_compression))
        return false;
      if (!this.compression.equals(that.compression))
        return false;
    }

    boolean this_present_cpu = true && this.isSetCpu();
    boolean that_present_cpu = true && that.isSetCpu();
    if (this_present_cpu || that_present_cpu) {
      if (!(this_present_cpu && that_present_cpu))
        return false;
      if (!this.cpu.equals(that.cpu))
        return false;
    }

    boolean this_present_memory = true && this.isSetMemory();
    boolean that_present_memory = true && that.isSetMemory();
    if (this_present_memory || that_present_memory) {
      if (!(this_present_memory && that_present_memory))
        return false;
      if (!this.memory.equals(that.memory))
        return false;
    }

    boolean this_present_jvm = true && this.isSetJvm();
    boolean that_present_jvm = true && that.isSetJvm();
    if (this_present_jvm || that_present_jvm) {
      if (!(this_present_jvm && that_present_jvm))
        return false;
      if (!this.jvm.equals(that.jvm))
        return false;
    }

    boolean this_present_vendor = true && this.isSetVendor();
    boolean that_present_vendor = true && that.isSetVendor();
    if (this_present_vendor || that_present_vendor) {
      if (!(this_present_vendor && that_present_vendor))
        return false;
      if (!this.vendor.equals(that.vendor))
        return false;
    }

    boolean this_present_osFamily = true && this.isSetOsFamily();
    boolean that_present_osFamily = true && that.isSetOsFamily();
    if (this_present_osFamily || that_present_osFamily) {
      if (!(this_present_osFamily && that_present_osFamily))
        return false;
      if (!this.osFamily.equals(that.osFamily))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_protocol = true && this.isSetProtocol();
    boolean that_present_protocol = true && that.isSetProtocol();
    if (this_present_protocol || that_present_protocol) {
      if (!(this_present_protocol && that_present_protocol))
        return false;
      if (!this.protocol.equals(that.protocol))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_calls = true && this.isSetCalls();
    boolean that_present_calls = true && that.isSetCalls();
    if (this_present_calls || that_present_calls) {
      if (!(this_present_calls && that_present_calls))
        return false;
      if (!this.calls.equals(that.calls))
        return false;
    }

    boolean this_present_mapper = true && this.isSetMapper();
    boolean that_present_mapper = true && that.isSetMapper();
    if (this_present_mapper || that_present_mapper) {
      if (!(this_present_mapper && that_present_mapper))
        return false;
      if (!this.mapper.equals(that.mapper))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + nbThread;

    hashCode = hashCode * 8191 + ((isSetCompression()) ? 131071 : 524287);
    if (isSetCompression())
      hashCode = hashCode * 8191 + compression.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpu()) ? 131071 : 524287);
    if (isSetCpu())
      hashCode = hashCode * 8191 + cpu.hashCode();

    hashCode = hashCode * 8191 + ((isSetMemory()) ? 131071 : 524287);
    if (isSetMemory())
      hashCode = hashCode * 8191 + memory.hashCode();

    hashCode = hashCode * 8191 + ((isSetJvm()) ? 131071 : 524287);
    if (isSetJvm())
      hashCode = hashCode * 8191 + jvm.hashCode();

    hashCode = hashCode * 8191 + ((isSetVendor()) ? 131071 : 524287);
    if (isSetVendor())
      hashCode = hashCode * 8191 + vendor.hashCode();

    hashCode = hashCode * 8191 + ((isSetOsFamily()) ? 131071 : 524287);
    if (isSetOsFamily())
      hashCode = hashCode * 8191 + osFamily.hashCode();

    hashCode = hashCode * 8191 + ((isSetOsVersion()) ? 131071 : 524287);
    if (isSetOsVersion())
      hashCode = hashCode * 8191 + osVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetProtocol()) ? 131071 : 524287);
    if (isSetProtocol())
      hashCode = hashCode * 8191 + protocol.hashCode();

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment.hashCode();

    hashCode = hashCode * 8191 + ((isSetCalls()) ? 131071 : 524287);
    if (isSetCalls())
      hashCode = hashCode * 8191 + calls.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapper()) ? 131071 : 524287);
    if (isSetMapper())
      hashCode = hashCode * 8191 + mapper.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TestSuite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNbThread()).compareTo(other.isSetNbThread());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNbThread()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nbThread, other.nbThread);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, other.compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpu()).compareTo(other.isSetCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu, other.cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemory()).compareTo(other.isSetMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, other.memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJvm()).compareTo(other.isSetJvm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvm, other.jvm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVendor()).compareTo(other.isSetVendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vendor, other.vendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsFamily()).compareTo(other.isSetOsFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osFamily, other.osFamily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsVersion()).compareTo(other.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, other.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCalls()).compareTo(other.isSetCalls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calls, other.calls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMapper()).compareTo(other.isSetMapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapper, other.mapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TestSuite(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nbThread:");
    sb.append(this.nbThread);
    first = false;
    if (isSetCompression()) {
      if (!first) sb.append(", ");
      sb.append("compression:");
      if (this.compression == null) {
        sb.append("null");
      } else {
        sb.append(this.compression);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("cpu:");
    if (this.cpu == null) {
      sb.append("null");
    } else {
      sb.append(this.cpu);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memory:");
    if (this.memory == null) {
      sb.append("null");
    } else {
      sb.append(this.memory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvm:");
    if (this.jvm == null) {
      sb.append("null");
    } else {
      sb.append(this.jvm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vendor:");
    if (this.vendor == null) {
      sb.append("null");
    } else {
      sb.append(this.vendor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osFamily:");
    if (this.osFamily == null) {
      sb.append("null");
    } else {
      sb.append(this.osFamily);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osVersion:");
    if (this.osVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.osVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocol:");
    if (this.protocol == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calls:");
    if (this.calls == null) {
      sb.append("null");
    } else {
      sb.append(this.calls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapper:");
    if (this.mapper == null) {
      sb.append("null");
    } else {
      sb.append(this.mapper);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetNbThread()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nbThread' is unset! Struct:" + toString());
    }

    if (!isSetCpu()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpu' is unset! Struct:" + toString());
    }

    if (!isSetMemory()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memory' is unset! Struct:" + toString());
    }

    if (!isSetJvm()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvm' is unset! Struct:" + toString());
    }

    if (!isSetVendor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vendor' is unset! Struct:" + toString());
    }

    if (!isSetOsFamily()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osFamily' is unset! Struct:" + toString());
    }

    if (!isSetOsVersion()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osVersion' is unset! Struct:" + toString());
    }

    if (!isSetCalls()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'calls' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestSuiteStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TestSuiteStandardScheme getScheme() {
      return new TestSuiteStandardScheme();
    }
  }

  private static class TestSuiteStandardScheme extends org.apache.thrift.scheme.StandardScheme<TestSuite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestSuite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NB_THREAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nbThread = iprot.readI32();
              struct.setNbThreadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compression = iprot.readString();
              struct.setCompressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpu = iprot.readString();
              struct.setCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memory = iprot.readString();
              struct.setMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JVM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvm = iprot.readString();
              struct.setJvmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vendor = iprot.readString();
              struct.setVendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OS_FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osFamily = iprot.readString();
              struct.setOsFamilyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocol = iprot.readString();
              struct.setProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CALLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.calls = new java.util.ArrayList<ClientCall>(_list16.size);
                @org.apache.thrift.annotation.Nullable ClientCall _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new ClientCall();
                  _elem17.read(iprot);
                  struct.calls.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setCallsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapper = com.github.vlachenal.webservice.bench.thrift.api.Mapper.findByValue(iprot.readI32());
              struct.setMapperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestSuite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NB_THREAD_FIELD_DESC);
      oprot.writeI32(struct.nbThread);
      oprot.writeFieldEnd();
      if (struct.compression != null) {
        if (struct.isSetCompression()) {
          oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
          oprot.writeString(struct.compression);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpu != null) {
        oprot.writeFieldBegin(CPU_FIELD_DESC);
        oprot.writeString(struct.cpu);
        oprot.writeFieldEnd();
      }
      if (struct.memory != null) {
        oprot.writeFieldBegin(MEMORY_FIELD_DESC);
        oprot.writeString(struct.memory);
        oprot.writeFieldEnd();
      }
      if (struct.jvm != null) {
        oprot.writeFieldBegin(JVM_FIELD_DESC);
        oprot.writeString(struct.jvm);
        oprot.writeFieldEnd();
      }
      if (struct.vendor != null) {
        oprot.writeFieldBegin(VENDOR_FIELD_DESC);
        oprot.writeString(struct.vendor);
        oprot.writeFieldEnd();
      }
      if (struct.osFamily != null) {
        oprot.writeFieldBegin(OS_FAMILY_FIELD_DESC);
        oprot.writeString(struct.osFamily);
        oprot.writeFieldEnd();
      }
      if (struct.osVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.osVersion);
        oprot.writeFieldEnd();
      }
      if (struct.protocol != null) {
        oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.protocol);
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      if (struct.calls != null) {
        oprot.writeFieldBegin(CALLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.calls.size()));
          for (ClientCall _iter19 : struct.calls)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapper != null) {
        oprot.writeFieldBegin(MAPPER_FIELD_DESC);
        oprot.writeI32(struct.mapper.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestSuiteTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TestSuiteTupleScheme getScheme() {
      return new TestSuiteTupleScheme();
    }
  }

  private static class TestSuiteTupleScheme extends org.apache.thrift.scheme.TupleScheme<TestSuite> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestSuite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.nbThread);
      oprot.writeString(struct.cpu);
      oprot.writeString(struct.memory);
      oprot.writeString(struct.jvm);
      oprot.writeString(struct.vendor);
      oprot.writeString(struct.osFamily);
      oprot.writeString(struct.osVersion);
      {
        oprot.writeI32(struct.calls.size());
        for (ClientCall _iter20 : struct.calls)
        {
          _iter20.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompression()) {
        optionals.set(1);
      }
      if (struct.isSetProtocol()) {
        optionals.set(2);
      }
      if (struct.isSetComment()) {
        optionals.set(3);
      }
      if (struct.isSetMapper()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCompression()) {
        oprot.writeString(struct.compression);
      }
      if (struct.isSetProtocol()) {
        oprot.writeString(struct.protocol);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetMapper()) {
        oprot.writeI32(struct.mapper.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestSuite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nbThread = iprot.readI32();
      struct.setNbThreadIsSet(true);
      struct.cpu = iprot.readString();
      struct.setCpuIsSet(true);
      struct.memory = iprot.readString();
      struct.setMemoryIsSet(true);
      struct.jvm = iprot.readString();
      struct.setJvmIsSet(true);
      struct.vendor = iprot.readString();
      struct.setVendorIsSet(true);
      struct.osFamily = iprot.readString();
      struct.setOsFamilyIsSet(true);
      struct.osVersion = iprot.readString();
      struct.setOsVersionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.calls = new java.util.ArrayList<ClientCall>(_list21.size);
        @org.apache.thrift.annotation.Nullable ClientCall _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new ClientCall();
          _elem22.read(iprot);
          struct.calls.add(_elem22);
        }
      }
      struct.setCallsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compression = iprot.readString();
        struct.setCompressionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.protocol = iprot.readString();
        struct.setProtocolIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mapper = com.github.vlachenal.webservice.bench.thrift.api.Mapper.findByValue(iprot.readI32());
        struct.setMapperIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

